/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getFeesDecoder,
  getFeesEncoder,
  type Fees,
  type FeesArgs,
} from '../types';

export type EpochSnapshot = {
  discriminator: bigint;
  ncn: Address;
  ncnEpoch: bigint;
  slotCreated: bigint;
  bump: number;
  ncnFees: Fees;
  operatorCount: bigint;
  operatorsRegistered: bigint;
  totalVotes: bigint;
  reserved: Array<number>;
};

export type EpochSnapshotArgs = {
  discriminator: number | bigint;
  ncn: Address;
  ncnEpoch: number | bigint;
  slotCreated: number | bigint;
  bump: number;
  ncnFees: FeesArgs;
  operatorCount: number | bigint;
  operatorsRegistered: number | bigint;
  totalVotes: number | bigint;
  reserved: Array<number>;
};

export function getEpochSnapshotEncoder(): Encoder<EpochSnapshotArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['ncnEpoch', getU64Encoder()],
    ['slotCreated', getU64Encoder()],
    ['bump', getU8Encoder()],
    ['ncnFees', getFeesEncoder()],
    ['operatorCount', getU64Encoder()],
    ['operatorsRegistered', getU64Encoder()],
    ['totalVotes', getU128Encoder()],
    ['reserved', getArrayEncoder(getU8Encoder(), { size: 128 })],
  ]);
}

export function getEpochSnapshotDecoder(): Decoder<EpochSnapshot> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['ncnEpoch', getU64Decoder()],
    ['slotCreated', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['ncnFees', getFeesDecoder()],
    ['operatorCount', getU64Decoder()],
    ['operatorsRegistered', getU64Decoder()],
    ['totalVotes', getU128Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 128 })],
  ]);
}

export function getEpochSnapshotCodec(): Codec<
  EpochSnapshotArgs,
  EpochSnapshot
> {
  return combineCodec(getEpochSnapshotEncoder(), getEpochSnapshotDecoder());
}

export function decodeEpochSnapshot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<EpochSnapshot, TAddress>;
export function decodeEpochSnapshot<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<EpochSnapshot, TAddress>;
export function decodeEpochSnapshot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<EpochSnapshot, TAddress> | MaybeAccount<EpochSnapshot, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEpochSnapshotDecoder()
  );
}

export async function fetchEpochSnapshot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<EpochSnapshot, TAddress>> {
  const maybeAccount = await fetchMaybeEpochSnapshot(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEpochSnapshot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<EpochSnapshot, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEpochSnapshot(maybeAccount);
}

export async function fetchAllEpochSnapshot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<EpochSnapshot>[]> {
  const maybeAccounts = await fetchAllMaybeEpochSnapshot(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEpochSnapshot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<EpochSnapshot>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEpochSnapshot(maybeAccount));
}
