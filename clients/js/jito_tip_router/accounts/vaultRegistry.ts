/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getStMintEntryDecoder,
  getStMintEntryEncoder,
  getVaultEntryDecoder,
  getVaultEntryEncoder,
  type StMintEntry,
  type StMintEntryArgs,
  type VaultEntry,
  type VaultEntryArgs,
} from '../types';

export type VaultRegistry = {
  discriminator: bigint;
  ncn: Address;
  bump: number;
  reserved: Array<number>;
  stMintList: Array<StMintEntry>;
  vaultList: Array<VaultEntry>;
};

export type VaultRegistryArgs = {
  discriminator: number | bigint;
  ncn: Address;
  bump: number;
  reserved: Array<number>;
  stMintList: Array<StMintEntryArgs>;
  vaultList: Array<VaultEntryArgs>;
};

export function getVaultRegistryEncoder(): Encoder<VaultRegistryArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['bump', getU8Encoder()],
    ['reserved', getArrayEncoder(getU8Encoder(), { size: 127 })],
    ['stMintList', getArrayEncoder(getStMintEntryEncoder(), { size: 64 })],
    ['vaultList', getArrayEncoder(getVaultEntryEncoder(), { size: 64 })],
  ]);
}

export function getVaultRegistryDecoder(): Decoder<VaultRegistry> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 127 })],
    ['stMintList', getArrayDecoder(getStMintEntryDecoder(), { size: 64 })],
    ['vaultList', getArrayDecoder(getVaultEntryDecoder(), { size: 64 })],
  ]);
}

export function getVaultRegistryCodec(): Codec<
  VaultRegistryArgs,
  VaultRegistry
> {
  return combineCodec(getVaultRegistryEncoder(), getVaultRegistryDecoder());
}

export function decodeVaultRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VaultRegistry, TAddress>;
export function decodeVaultRegistry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VaultRegistry, TAddress>;
export function decodeVaultRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VaultRegistry, TAddress> | MaybeAccount<VaultRegistry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultRegistryDecoder()
  );
}

export async function fetchVaultRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VaultRegistry, TAddress>> {
  const maybeAccount = await fetchMaybeVaultRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVaultRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VaultRegistry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVaultRegistry(maybeAccount);
}

export async function fetchAllVaultRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VaultRegistry>[]> {
  const maybeAccounts = await fetchAllMaybeVaultRegistry(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVaultRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VaultRegistry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVaultRegistry(maybeAccount));
}
