/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADMIN_REGISTER_ST_MINT_DISCRIMINATOR = 30;

export function getAdminRegisterStMintDiscriminatorBytes() {
  return getU8Encoder().encode(ADMIN_REGISTER_ST_MINT_DISCRIMINATOR);
}

export type AdminRegisterStMintInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountStMint extends string | IAccountMeta<string> = string,
  TAccountVaultRegistry extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountStMint extends string
        ? ReadonlyAccount<TAccountStMint>
        : TAccountStMint,
      TAccountVaultRegistry extends string
        ? WritableAccount<TAccountVaultRegistry>
        : TAccountVaultRegistry,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminRegisterStMintInstructionData = {
  discriminator: number;
  ncnFeeGroup: number;
  rewardMultiplierBps: bigint;
  switchboardFeed: Option<Address>;
  noFeedWeight: Option<bigint>;
};

export type AdminRegisterStMintInstructionDataArgs = {
  ncnFeeGroup: number;
  rewardMultiplierBps: number | bigint;
  switchboardFeed: OptionOrNullable<Address>;
  noFeedWeight: OptionOrNullable<number | bigint>;
};

export function getAdminRegisterStMintInstructionDataEncoder(): Encoder<AdminRegisterStMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['ncnFeeGroup', getU8Encoder()],
      ['rewardMultiplierBps', getU64Encoder()],
      ['switchboardFeed', getOptionEncoder(getAddressEncoder())],
      ['noFeedWeight', getOptionEncoder(getU128Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: ADMIN_REGISTER_ST_MINT_DISCRIMINATOR,
    })
  );
}

export function getAdminRegisterStMintInstructionDataDecoder(): Decoder<AdminRegisterStMintInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['ncnFeeGroup', getU8Decoder()],
    ['rewardMultiplierBps', getU64Decoder()],
    ['switchboardFeed', getOptionDecoder(getAddressDecoder())],
    ['noFeedWeight', getOptionDecoder(getU128Decoder())],
  ]);
}

export function getAdminRegisterStMintInstructionDataCodec(): Codec<
  AdminRegisterStMintInstructionDataArgs,
  AdminRegisterStMintInstructionData
> {
  return combineCodec(
    getAdminRegisterStMintInstructionDataEncoder(),
    getAdminRegisterStMintInstructionDataDecoder()
  );
}

export type AdminRegisterStMintInput<
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountStMint extends string = string,
  TAccountVaultRegistry extends string = string,
  TAccountAdmin extends string = string,
  TAccountRestakingProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  stMint: Address<TAccountStMint>;
  vaultRegistry: Address<TAccountVaultRegistry>;
  admin: TransactionSigner<TAccountAdmin>;
  restakingProgram: Address<TAccountRestakingProgram>;
  ncnFeeGroup: AdminRegisterStMintInstructionDataArgs['ncnFeeGroup'];
  rewardMultiplierBps: AdminRegisterStMintInstructionDataArgs['rewardMultiplierBps'];
  switchboardFeed: AdminRegisterStMintInstructionDataArgs['switchboardFeed'];
  noFeedWeight: AdminRegisterStMintInstructionDataArgs['noFeedWeight'];
};

export function getAdminRegisterStMintInstruction<
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountStMint extends string,
  TAccountVaultRegistry extends string,
  TAccountAdmin extends string,
  TAccountRestakingProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: AdminRegisterStMintInput<
    TAccountConfig,
    TAccountNcn,
    TAccountStMint,
    TAccountVaultRegistry,
    TAccountAdmin,
    TAccountRestakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AdminRegisterStMintInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountNcn,
  TAccountStMint,
  TAccountVaultRegistry,
  TAccountAdmin,
  TAccountRestakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    stMint: { value: input.stMint ?? null, isWritable: false },
    vaultRegistry: { value: input.vaultRegistry ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.stMint),
      getAccountMeta(accounts.vaultRegistry),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.restakingProgram),
    ],
    programAddress,
    data: getAdminRegisterStMintInstructionDataEncoder().encode(
      args as AdminRegisterStMintInstructionDataArgs
    ),
  } as AdminRegisterStMintInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountNcn,
    TAccountStMint,
    TAccountVaultRegistry,
    TAccountAdmin,
    TAccountRestakingProgram
  >;

  return instruction;
}

export type ParsedAdminRegisterStMintInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    ncn: TAccountMetas[1];
    stMint: TAccountMetas[2];
    vaultRegistry: TAccountMetas[3];
    admin: TAccountMetas[4];
    restakingProgram: TAccountMetas[5];
  };
  data: AdminRegisterStMintInstructionData;
};

export function parseAdminRegisterStMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAdminRegisterStMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      ncn: getNextAccount(),
      stMint: getNextAccount(),
      vaultRegistry: getNextAccount(),
      admin: getNextAccount(),
      restakingProgram: getNextAccount(),
    },
    data: getAdminRegisterStMintInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
