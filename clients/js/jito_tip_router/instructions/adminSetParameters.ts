/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADMIN_SET_PARAMETERS_DISCRIMINATOR = 31;

export function getAdminSetParametersDiscriminatorBytes() {
  return getU8Encoder().encode(ADMIN_SET_PARAMETERS_DISCRIMINATOR);
}

export type AdminSetParametersInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountNcnAdmin extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountNcnAdmin extends string
        ? ReadonlySignerAccount<TAccountNcnAdmin> &
            IAccountSignerMeta<TAccountNcnAdmin>
        : TAccountNcnAdmin,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminSetParametersInstructionData = {
  discriminator: number;
  epochsBeforeStall: Option<bigint>;
  validSlotsAfterConsensus: Option<bigint>;
};

export type AdminSetParametersInstructionDataArgs = {
  epochsBeforeStall: OptionOrNullable<number | bigint>;
  validSlotsAfterConsensus: OptionOrNullable<number | bigint>;
};

export function getAdminSetParametersInstructionDataEncoder(): Encoder<AdminSetParametersInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['epochsBeforeStall', getOptionEncoder(getU64Encoder())],
      ['validSlotsAfterConsensus', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: ADMIN_SET_PARAMETERS_DISCRIMINATOR })
  );
}

export function getAdminSetParametersInstructionDataDecoder(): Decoder<AdminSetParametersInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['epochsBeforeStall', getOptionDecoder(getU64Decoder())],
    ['validSlotsAfterConsensus', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getAdminSetParametersInstructionDataCodec(): Codec<
  AdminSetParametersInstructionDataArgs,
  AdminSetParametersInstructionData
> {
  return combineCodec(
    getAdminSetParametersInstructionDataEncoder(),
    getAdminSetParametersInstructionDataDecoder()
  );
}

export type AdminSetParametersInput<
  TAccountRestakingConfig extends string = string,
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountNcnAdmin extends string = string,
  TAccountRestakingProgram extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  ncnAdmin: TransactionSigner<TAccountNcnAdmin>;
  restakingProgram: Address<TAccountRestakingProgram>;
  epochsBeforeStall: AdminSetParametersInstructionDataArgs['epochsBeforeStall'];
  validSlotsAfterConsensus: AdminSetParametersInstructionDataArgs['validSlotsAfterConsensus'];
};

export function getAdminSetParametersInstruction<
  TAccountRestakingConfig extends string,
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountNcnAdmin extends string,
  TAccountRestakingProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: AdminSetParametersInput<
    TAccountRestakingConfig,
    TAccountConfig,
    TAccountNcn,
    TAccountNcnAdmin,
    TAccountRestakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AdminSetParametersInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountConfig,
  TAccountNcn,
  TAccountNcnAdmin,
  TAccountRestakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    config: { value: input.config ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ncnAdmin: { value: input.ncnAdmin ?? null, isWritable: false },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ncnAdmin),
      getAccountMeta(accounts.restakingProgram),
    ],
    programAddress,
    data: getAdminSetParametersInstructionDataEncoder().encode(
      args as AdminSetParametersInstructionDataArgs
    ),
  } as AdminSetParametersInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountConfig,
    TAccountNcn,
    TAccountNcnAdmin,
    TAccountRestakingProgram
  >;

  return instruction;
}

export type ParsedAdminSetParametersInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    config: TAccountMetas[1];
    ncn: TAccountMetas[2];
    ncnAdmin: TAccountMetas[3];
    restakingProgram: TAccountMetas[4];
  };
  data: AdminSetParametersInstructionData;
};

export function parseAdminSetParametersInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAdminSetParametersInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      config: getNextAccount(),
      ncn: getNextAccount(),
      ncnAdmin: getNextAccount(),
      restakingProgram: getNextAccount(),
    },
    data: getAdminSetParametersInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
