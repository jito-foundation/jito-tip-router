/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADMIN_SET_TIE_BREAKER_DISCRIMINATOR = 28;

export function getAdminSetTieBreakerDiscriminatorBytes() {
  return getU8Encoder().encode(ADMIN_SET_TIE_BREAKER_DISCRIMINATOR);
}

export type AdminSetTieBreakerInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountBallotBox extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountTieBreakerAdmin extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBallotBox extends string
        ? WritableAccount<TAccountBallotBox>
        : TAccountBallotBox,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountTieBreakerAdmin extends string
        ? ReadonlySignerAccount<TAccountTieBreakerAdmin> &
            IAccountSignerMeta<TAccountTieBreakerAdmin>
        : TAccountTieBreakerAdmin,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminSetTieBreakerInstructionData = {
  discriminator: number;
  metaMerkleRoot: ReadonlyUint8Array;
  epoch: bigint;
};

export type AdminSetTieBreakerInstructionDataArgs = {
  metaMerkleRoot: ReadonlyUint8Array;
  epoch: number | bigint;
};

export function getAdminSetTieBreakerInstructionDataEncoder(): Encoder<AdminSetTieBreakerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['metaMerkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADMIN_SET_TIE_BREAKER_DISCRIMINATOR,
    })
  );
}

export function getAdminSetTieBreakerInstructionDataDecoder(): Decoder<AdminSetTieBreakerInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['metaMerkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['epoch', getU64Decoder()],
  ]);
}

export function getAdminSetTieBreakerInstructionDataCodec(): Codec<
  AdminSetTieBreakerInstructionDataArgs,
  AdminSetTieBreakerInstructionData
> {
  return combineCodec(
    getAdminSetTieBreakerInstructionDataEncoder(),
    getAdminSetTieBreakerInstructionDataDecoder()
  );
}

export type AdminSetTieBreakerInput<
  TAccountConfig extends string = string,
  TAccountBallotBox extends string = string,
  TAccountNcn extends string = string,
  TAccountTieBreakerAdmin extends string = string,
  TAccountRestakingProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  ballotBox: Address<TAccountBallotBox>;
  ncn: Address<TAccountNcn>;
  tieBreakerAdmin: TransactionSigner<TAccountTieBreakerAdmin>;
  restakingProgram: Address<TAccountRestakingProgram>;
  metaMerkleRoot: AdminSetTieBreakerInstructionDataArgs['metaMerkleRoot'];
  epoch: AdminSetTieBreakerInstructionDataArgs['epoch'];
};

export function getAdminSetTieBreakerInstruction<
  TAccountConfig extends string,
  TAccountBallotBox extends string,
  TAccountNcn extends string,
  TAccountTieBreakerAdmin extends string,
  TAccountRestakingProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: AdminSetTieBreakerInput<
    TAccountConfig,
    TAccountBallotBox,
    TAccountNcn,
    TAccountTieBreakerAdmin,
    TAccountRestakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AdminSetTieBreakerInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountBallotBox,
  TAccountNcn,
  TAccountTieBreakerAdmin,
  TAccountRestakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    ballotBox: { value: input.ballotBox ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    tieBreakerAdmin: {
      value: input.tieBreakerAdmin ?? null,
      isWritable: false,
    },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ballotBox),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.tieBreakerAdmin),
      getAccountMeta(accounts.restakingProgram),
    ],
    programAddress,
    data: getAdminSetTieBreakerInstructionDataEncoder().encode(
      args as AdminSetTieBreakerInstructionDataArgs
    ),
  } as AdminSetTieBreakerInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountBallotBox,
    TAccountNcn,
    TAccountTieBreakerAdmin,
    TAccountRestakingProgram
  >;

  return instruction;
}

export type ParsedAdminSetTieBreakerInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    ballotBox: TAccountMetas[1];
    ncn: TAccountMetas[2];
    tieBreakerAdmin: TAccountMetas[3];
    restakingProgram: TAccountMetas[4];
  };
  data: AdminSetTieBreakerInstructionData;
};

export function parseAdminSetTieBreakerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAdminSetTieBreakerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      ballotBox: getNextAccount(),
      ncn: getNextAccount(),
      tieBreakerAdmin: getNextAccount(),
      restakingProgram: getNextAccount(),
    },
    data: getAdminSetTieBreakerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
