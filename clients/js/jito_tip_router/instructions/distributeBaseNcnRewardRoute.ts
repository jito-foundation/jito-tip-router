/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISTRIBUTE_BASE_NCN_REWARD_ROUTE_DISCRIMINATOR = 15;

export function getDistributeBaseNcnRewardRouteDiscriminatorBytes() {
  return getU8Encoder().encode(DISTRIBUTE_BASE_NCN_REWARD_ROUTE_DISCRIMINATOR);
}

export type DistributeBaseNcnRewardRouteInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountNcnConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountBaseRewardRouter extends string | IAccountMeta<string> = string,
  TAccountNcnRewardRouter extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountNcnConfig extends string
        ? ReadonlyAccount<TAccountNcnConfig>
        : TAccountNcnConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountBaseRewardRouter extends string
        ? WritableAccount<TAccountBaseRewardRouter>
        : TAccountBaseRewardRouter,
      TAccountNcnRewardRouter extends string
        ? WritableAccount<TAccountNcnRewardRouter>
        : TAccountNcnRewardRouter,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DistributeBaseNcnRewardRouteInstructionData = {
  discriminator: number;
  ncnFeeGroup: number;
  firstSlotOfNcnEpoch: Option<bigint>;
};

export type DistributeBaseNcnRewardRouteInstructionDataArgs = {
  ncnFeeGroup: number;
  firstSlotOfNcnEpoch: OptionOrNullable<number | bigint>;
};

export function getDistributeBaseNcnRewardRouteInstructionDataEncoder(): Encoder<DistributeBaseNcnRewardRouteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['ncnFeeGroup', getU8Encoder()],
      ['firstSlotOfNcnEpoch', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: DISTRIBUTE_BASE_NCN_REWARD_ROUTE_DISCRIMINATOR,
    })
  );
}

export function getDistributeBaseNcnRewardRouteInstructionDataDecoder(): Decoder<DistributeBaseNcnRewardRouteInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['ncnFeeGroup', getU8Decoder()],
    ['firstSlotOfNcnEpoch', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getDistributeBaseNcnRewardRouteInstructionDataCodec(): Codec<
  DistributeBaseNcnRewardRouteInstructionDataArgs,
  DistributeBaseNcnRewardRouteInstructionData
> {
  return combineCodec(
    getDistributeBaseNcnRewardRouteInstructionDataEncoder(),
    getDistributeBaseNcnRewardRouteInstructionDataDecoder()
  );
}

export type DistributeBaseNcnRewardRouteInput<
  TAccountRestakingConfig extends string = string,
  TAccountNcnConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountOperator extends string = string,
  TAccountBaseRewardRouter extends string = string,
  TAccountNcnRewardRouter extends string = string,
  TAccountRestakingProgram extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  ncnConfig: Address<TAccountNcnConfig>;
  ncn: Address<TAccountNcn>;
  operator: Address<TAccountOperator>;
  baseRewardRouter: Address<TAccountBaseRewardRouter>;
  ncnRewardRouter: Address<TAccountNcnRewardRouter>;
  restakingProgram: Address<TAccountRestakingProgram>;
  ncnFeeGroup: DistributeBaseNcnRewardRouteInstructionDataArgs['ncnFeeGroup'];
  firstSlotOfNcnEpoch: DistributeBaseNcnRewardRouteInstructionDataArgs['firstSlotOfNcnEpoch'];
};

export function getDistributeBaseNcnRewardRouteInstruction<
  TAccountRestakingConfig extends string,
  TAccountNcnConfig extends string,
  TAccountNcn extends string,
  TAccountOperator extends string,
  TAccountBaseRewardRouter extends string,
  TAccountNcnRewardRouter extends string,
  TAccountRestakingProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: DistributeBaseNcnRewardRouteInput<
    TAccountRestakingConfig,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountBaseRewardRouter,
    TAccountNcnRewardRouter,
    TAccountRestakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeBaseNcnRewardRouteInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountNcnConfig,
  TAccountNcn,
  TAccountOperator,
  TAccountBaseRewardRouter,
  TAccountNcnRewardRouter,
  TAccountRestakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    ncnConfig: { value: input.ncnConfig ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    baseRewardRouter: {
      value: input.baseRewardRouter ?? null,
      isWritable: true,
    },
    ncnRewardRouter: { value: input.ncnRewardRouter ?? null, isWritable: true },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.ncnConfig),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.baseRewardRouter),
      getAccountMeta(accounts.ncnRewardRouter),
      getAccountMeta(accounts.restakingProgram),
    ],
    programAddress,
    data: getDistributeBaseNcnRewardRouteInstructionDataEncoder().encode(
      args as DistributeBaseNcnRewardRouteInstructionDataArgs
    ),
  } as DistributeBaseNcnRewardRouteInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountBaseRewardRouter,
    TAccountNcnRewardRouter,
    TAccountRestakingProgram
  >;

  return instruction;
}

export type ParsedDistributeBaseNcnRewardRouteInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    ncnConfig: TAccountMetas[1];
    ncn: TAccountMetas[2];
    operator: TAccountMetas[3];
    baseRewardRouter: TAccountMetas[4];
    ncnRewardRouter: TAccountMetas[5];
    restakingProgram: TAccountMetas[6];
  };
  data: DistributeBaseNcnRewardRouteInstructionData;
};

export function parseDistributeBaseNcnRewardRouteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDistributeBaseNcnRewardRouteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      ncnConfig: getNextAccount(),
      ncn: getNextAccount(),
      operator: getNextAccount(),
      baseRewardRouter: getNextAccount(),
      ncnRewardRouter: getNextAccount(),
      restakingProgram: getNextAccount(),
    },
    data: getDistributeBaseNcnRewardRouteInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
