/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISTRIBUTE_NCN_VAULT_REWARDS_DISCRIMINATOR = 18;

export function getDistributeNcnVaultRewardsDiscriminatorBytes() {
  return getU8Encoder().encode(DISTRIBUTE_NCN_VAULT_REWARDS_DISCRIMINATOR);
}

export type DistributeNcnVaultRewardsInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountNcnRewardRouter extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountNcnRewardRouter extends string
        ? WritableAccount<TAccountNcnRewardRouter>
        : TAccountNcnRewardRouter,
      ...TRemainingAccounts,
    ]
  >;

export type DistributeNcnVaultRewardsInstructionData = {
  discriminator: number;
  ncnFeeGroup: number;
  epoch: bigint;
};

export type DistributeNcnVaultRewardsInstructionDataArgs = {
  ncnFeeGroup: number;
  epoch: number | bigint;
};

export function getDistributeNcnVaultRewardsInstructionDataEncoder(): Encoder<DistributeNcnVaultRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['ncnFeeGroup', getU8Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DISTRIBUTE_NCN_VAULT_REWARDS_DISCRIMINATOR,
    })
  );
}

export function getDistributeNcnVaultRewardsInstructionDataDecoder(): Decoder<DistributeNcnVaultRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['ncnFeeGroup', getU8Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getDistributeNcnVaultRewardsInstructionDataCodec(): Codec<
  DistributeNcnVaultRewardsInstructionDataArgs,
  DistributeNcnVaultRewardsInstructionData
> {
  return combineCodec(
    getDistributeNcnVaultRewardsInstructionDataEncoder(),
    getDistributeNcnVaultRewardsInstructionDataDecoder()
  );
}

export type DistributeNcnVaultRewardsInput<
  TAccountRestakingConfig extends string = string,
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountOperator extends string = string,
  TAccountVault extends string = string,
  TAccountNcnRewardRouter extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  operator: Address<TAccountOperator>;
  vault: Address<TAccountVault>;
  ncnRewardRouter: Address<TAccountNcnRewardRouter>;
  ncnFeeGroup: DistributeNcnVaultRewardsInstructionDataArgs['ncnFeeGroup'];
  epoch: DistributeNcnVaultRewardsInstructionDataArgs['epoch'];
};

export function getDistributeNcnVaultRewardsInstruction<
  TAccountRestakingConfig extends string,
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountOperator extends string,
  TAccountVault extends string,
  TAccountNcnRewardRouter extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: DistributeNcnVaultRewardsInput<
    TAccountRestakingConfig,
    TAccountConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountVault,
    TAccountNcnRewardRouter
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeNcnVaultRewardsInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountConfig,
  TAccountNcn,
  TAccountOperator,
  TAccountVault,
  TAccountNcnRewardRouter
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    config: { value: input.config ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    ncnRewardRouter: { value: input.ncnRewardRouter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.ncnRewardRouter),
    ],
    programAddress,
    data: getDistributeNcnVaultRewardsInstructionDataEncoder().encode(
      args as DistributeNcnVaultRewardsInstructionDataArgs
    ),
  } as DistributeNcnVaultRewardsInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountVault,
    TAccountNcnRewardRouter
  >;

  return instruction;
}

export type ParsedDistributeNcnVaultRewardsInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    config: TAccountMetas[1];
    ncn: TAccountMetas[2];
    operator: TAccountMetas[3];
    vault: TAccountMetas[4];
    ncnRewardRouter: TAccountMetas[5];
  };
  data: DistributeNcnVaultRewardsInstructionData;
};

export function parseDistributeNcnVaultRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDistributeNcnVaultRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      config: getNextAccount(),
      ncn: getNextAccount(),
      operator: getNextAccount(),
      vault: getNextAccount(),
      ncnRewardRouter: getNextAccount(),
    },
    data: getDistributeNcnVaultRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
