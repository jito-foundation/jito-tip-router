/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_N_C_N_CONFIG_DISCRIMINATOR = 0;

export function getInitializeNCNConfigDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_N_C_N_CONFIG_DISCRIMINATOR);
}

export type InitializeNCNConfigInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountNcnConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountNcnAdmin extends string | IAccountMeta<string> = string,
  TAccountFeeWallet extends string | IAccountMeta<string> = string,
  TAccountTieBreakerAdmin extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountNcnConfig extends string
        ? WritableAccount<TAccountNcnConfig>
        : TAccountNcnConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountNcnAdmin extends string
        ? ReadonlySignerAccount<TAccountNcnAdmin> &
            IAccountSignerMeta<TAccountNcnAdmin>
        : TAccountNcnAdmin,
      TAccountFeeWallet extends string
        ? ReadonlyAccount<TAccountFeeWallet>
        : TAccountFeeWallet,
      TAccountTieBreakerAdmin extends string
        ? ReadonlyAccount<TAccountTieBreakerAdmin>
        : TAccountTieBreakerAdmin,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeNCNConfigInstructionData = {
  discriminator: number;
  blockEngineFeeBps: number;
  daoFeeBps: number;
  defaultNcnFeeBps: number;
};

export type InitializeNCNConfigInstructionDataArgs = {
  blockEngineFeeBps: number;
  daoFeeBps: number;
  defaultNcnFeeBps: number;
};

export function getInitializeNCNConfigInstructionDataEncoder(): Encoder<InitializeNCNConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['blockEngineFeeBps', getU16Encoder()],
      ['daoFeeBps', getU16Encoder()],
      ['defaultNcnFeeBps', getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_N_C_N_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getInitializeNCNConfigInstructionDataDecoder(): Decoder<InitializeNCNConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['blockEngineFeeBps', getU16Decoder()],
    ['daoFeeBps', getU16Decoder()],
    ['defaultNcnFeeBps', getU16Decoder()],
  ]);
}

export function getInitializeNCNConfigInstructionDataCodec(): Codec<
  InitializeNCNConfigInstructionDataArgs,
  InitializeNCNConfigInstructionData
> {
  return combineCodec(
    getInitializeNCNConfigInstructionDataEncoder(),
    getInitializeNCNConfigInstructionDataDecoder()
  );
}

export type InitializeNCNConfigInput<
  TAccountRestakingConfig extends string = string,
  TAccountNcnConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountNcnAdmin extends string = string,
  TAccountFeeWallet extends string = string,
  TAccountTieBreakerAdmin extends string = string,
  TAccountRestakingProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  ncnConfig: Address<TAccountNcnConfig>;
  ncn: Address<TAccountNcn>;
  ncnAdmin: TransactionSigner<TAccountNcnAdmin>;
  feeWallet: Address<TAccountFeeWallet>;
  tieBreakerAdmin: Address<TAccountTieBreakerAdmin>;
  restakingProgram: Address<TAccountRestakingProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  blockEngineFeeBps: InitializeNCNConfigInstructionDataArgs['blockEngineFeeBps'];
  daoFeeBps: InitializeNCNConfigInstructionDataArgs['daoFeeBps'];
  defaultNcnFeeBps: InitializeNCNConfigInstructionDataArgs['defaultNcnFeeBps'];
};

export function getInitializeNCNConfigInstruction<
  TAccountRestakingConfig extends string,
  TAccountNcnConfig extends string,
  TAccountNcn extends string,
  TAccountNcnAdmin extends string,
  TAccountFeeWallet extends string,
  TAccountTieBreakerAdmin extends string,
  TAccountRestakingProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: InitializeNCNConfigInput<
    TAccountRestakingConfig,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountNcnAdmin,
    TAccountFeeWallet,
    TAccountTieBreakerAdmin,
    TAccountRestakingProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeNCNConfigInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountNcnConfig,
  TAccountNcn,
  TAccountNcnAdmin,
  TAccountFeeWallet,
  TAccountTieBreakerAdmin,
  TAccountRestakingProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    ncnConfig: { value: input.ncnConfig ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ncnAdmin: { value: input.ncnAdmin ?? null, isWritable: false },
    feeWallet: { value: input.feeWallet ?? null, isWritable: false },
    tieBreakerAdmin: {
      value: input.tieBreakerAdmin ?? null,
      isWritable: false,
    },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.ncnConfig),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ncnAdmin),
      getAccountMeta(accounts.feeWallet),
      getAccountMeta(accounts.tieBreakerAdmin),
      getAccountMeta(accounts.restakingProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeNCNConfigInstructionDataEncoder().encode(
      args as InitializeNCNConfigInstructionDataArgs
    ),
  } as InitializeNCNConfigInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountNcnAdmin,
    TAccountFeeWallet,
    TAccountTieBreakerAdmin,
    TAccountRestakingProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeNCNConfigInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    ncnConfig: TAccountMetas[1];
    ncn: TAccountMetas[2];
    ncnAdmin: TAccountMetas[3];
    feeWallet: TAccountMetas[4];
    tieBreakerAdmin: TAccountMetas[5];
    restakingProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: InitializeNCNConfigInstructionData;
};

export function parseInitializeNCNConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeNCNConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      ncnConfig: getNextAccount(),
      ncn: getNextAccount(),
      ncnAdmin: getNextAccount(),
      feeWallet: getNextAccount(),
      tieBreakerAdmin: getNextAccount(),
      restakingProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeNCNConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
