/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_TRACKED_MINTS_DISCRIMINATOR = 1;

export function getInitializeTrackedMintsDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_TRACKED_MINTS_DISCRIMINATOR);
}

export type InitializeTrackedMintsInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountNcnConfig extends string | IAccountMeta<string> = string,
  TAccountTrackedMints extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcnConfig extends string
        ? ReadonlyAccount<TAccountNcnConfig>
        : TAccountNcnConfig,
      TAccountTrackedMints extends string
        ? WritableAccount<TAccountTrackedMints>
        : TAccountTrackedMints,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeTrackedMintsInstructionData = { discriminator: number };

export type InitializeTrackedMintsInstructionDataArgs = {};

export function getInitializeTrackedMintsInstructionDataEncoder(): Encoder<InitializeTrackedMintsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_TRACKED_MINTS_DISCRIMINATOR,
    })
  );
}

export function getInitializeTrackedMintsInstructionDataDecoder(): Decoder<InitializeTrackedMintsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeTrackedMintsInstructionDataCodec(): Codec<
  InitializeTrackedMintsInstructionDataArgs,
  InitializeTrackedMintsInstructionData
> {
  return combineCodec(
    getInitializeTrackedMintsInstructionDataEncoder(),
    getInitializeTrackedMintsInstructionDataDecoder()
  );
}

export type InitializeTrackedMintsInput<
  TAccountNcnConfig extends string = string,
  TAccountTrackedMints extends string = string,
  TAccountNcn extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  ncnConfig: Address<TAccountNcnConfig>;
  trackedMints: Address<TAccountTrackedMints>;
  ncn: Address<TAccountNcn>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeTrackedMintsInstruction<
  TAccountNcnConfig extends string,
  TAccountTrackedMints extends string,
  TAccountNcn extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: InitializeTrackedMintsInput<
    TAccountNcnConfig,
    TAccountTrackedMints,
    TAccountNcn,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeTrackedMintsInstruction<
  TProgramAddress,
  TAccountNcnConfig,
  TAccountTrackedMints,
  TAccountNcn,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncnConfig: { value: input.ncnConfig ?? null, isWritable: false },
    trackedMints: { value: input.trackedMints ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncnConfig),
      getAccountMeta(accounts.trackedMints),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeTrackedMintsInstructionDataEncoder().encode({}),
  } as InitializeTrackedMintsInstruction<
    TProgramAddress,
    TAccountNcnConfig,
    TAccountTrackedMints,
    TAccountNcn,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeTrackedMintsInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncnConfig: TAccountMetas[0];
    trackedMints: TAccountMetas[1];
    ncn: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeTrackedMintsInstructionData;
};

export function parseInitializeTrackedMintsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeTrackedMintsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncnConfig: getNextAccount(),
      trackedMints: getNextAccount(),
      ncn: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeTrackedMintsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
