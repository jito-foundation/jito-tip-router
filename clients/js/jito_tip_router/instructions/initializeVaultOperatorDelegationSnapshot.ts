/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_VAULT_OPERATOR_DELEGATION_SNAPSHOT_DISCRIMINATOR = 7;

export function getInitializeVaultOperatorDelegationSnapshotDiscriminatorBytes() {
  return getU8Encoder().encode(
    INITIALIZE_VAULT_OPERATOR_DELEGATION_SNAPSHOT_DISCRIMINATOR
  );
}

export type InitializeVaultOperatorDelegationSnapshotInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountNcnConfig extends string | IAccountMeta<string> = string,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultNcnTicket extends string | IAccountMeta<string> = string,
  TAccountNcnVaultTicket extends string | IAccountMeta<string> = string,
  TAccountVaultOperatorDelegation extends
    | string
    | IAccountMeta<string> = string,
  TAccountWeightTable extends string | IAccountMeta<string> = string,
  TAccountEpochSnapshot extends string | IAccountMeta<string> = string,
  TAccountOperatorSnapshot extends string | IAccountMeta<string> = string,
  TAccountVaultOperatorDelegationSnapshot extends
    | string
    | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRestakingProgramId extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcnConfig extends string
        ? ReadonlyAccount<TAccountNcnConfig>
        : TAccountNcnConfig,
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultNcnTicket extends string
        ? ReadonlyAccount<TAccountVaultNcnTicket>
        : TAccountVaultNcnTicket,
      TAccountNcnVaultTicket extends string
        ? ReadonlyAccount<TAccountNcnVaultTicket>
        : TAccountNcnVaultTicket,
      TAccountVaultOperatorDelegation extends string
        ? ReadonlyAccount<TAccountVaultOperatorDelegation>
        : TAccountVaultOperatorDelegation,
      TAccountWeightTable extends string
        ? ReadonlyAccount<TAccountWeightTable>
        : TAccountWeightTable,
      TAccountEpochSnapshot extends string
        ? WritableAccount<TAccountEpochSnapshot>
        : TAccountEpochSnapshot,
      TAccountOperatorSnapshot extends string
        ? WritableAccount<TAccountOperatorSnapshot>
        : TAccountOperatorSnapshot,
      TAccountVaultOperatorDelegationSnapshot extends string
        ? WritableAccount<TAccountVaultOperatorDelegationSnapshot>
        : TAccountVaultOperatorDelegationSnapshot,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRestakingProgramId extends string
        ? ReadonlyAccount<TAccountRestakingProgramId>
        : TAccountRestakingProgramId,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeVaultOperatorDelegationSnapshotInstructionData = {
  discriminator: number;
  firstSlotOfNcnEpoch: Option<bigint>;
};

export type InitializeVaultOperatorDelegationSnapshotInstructionDataArgs = {
  firstSlotOfNcnEpoch: OptionOrNullable<number | bigint>;
};

export function getInitializeVaultOperatorDelegationSnapshotInstructionDataEncoder(): Encoder<InitializeVaultOperatorDelegationSnapshotInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['firstSlotOfNcnEpoch', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator:
        INITIALIZE_VAULT_OPERATOR_DELEGATION_SNAPSHOT_DISCRIMINATOR,
    })
  );
}

export function getInitializeVaultOperatorDelegationSnapshotInstructionDataDecoder(): Decoder<InitializeVaultOperatorDelegationSnapshotInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['firstSlotOfNcnEpoch', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getInitializeVaultOperatorDelegationSnapshotInstructionDataCodec(): Codec<
  InitializeVaultOperatorDelegationSnapshotInstructionDataArgs,
  InitializeVaultOperatorDelegationSnapshotInstructionData
> {
  return combineCodec(
    getInitializeVaultOperatorDelegationSnapshotInstructionDataEncoder(),
    getInitializeVaultOperatorDelegationSnapshotInstructionDataDecoder()
  );
}

export type InitializeVaultOperatorDelegationSnapshotInput<
  TAccountNcnConfig extends string = string,
  TAccountRestakingConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountOperator extends string = string,
  TAccountVault extends string = string,
  TAccountVaultNcnTicket extends string = string,
  TAccountNcnVaultTicket extends string = string,
  TAccountVaultOperatorDelegation extends string = string,
  TAccountWeightTable extends string = string,
  TAccountEpochSnapshot extends string = string,
  TAccountOperatorSnapshot extends string = string,
  TAccountVaultOperatorDelegationSnapshot extends string = string,
  TAccountPayer extends string = string,
  TAccountRestakingProgramId extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  ncnConfig: Address<TAccountNcnConfig>;
  restakingConfig: Address<TAccountRestakingConfig>;
  ncn: Address<TAccountNcn>;
  operator: Address<TAccountOperator>;
  vault: Address<TAccountVault>;
  vaultNcnTicket: Address<TAccountVaultNcnTicket>;
  ncnVaultTicket: Address<TAccountNcnVaultTicket>;
  vaultOperatorDelegation: Address<TAccountVaultOperatorDelegation>;
  weightTable: Address<TAccountWeightTable>;
  epochSnapshot: Address<TAccountEpochSnapshot>;
  operatorSnapshot: Address<TAccountOperatorSnapshot>;
  vaultOperatorDelegationSnapshot: Address<TAccountVaultOperatorDelegationSnapshot>;
  payer: TransactionSigner<TAccountPayer>;
  restakingProgramId: Address<TAccountRestakingProgramId>;
  systemProgram?: Address<TAccountSystemProgram>;
  firstSlotOfNcnEpoch: InitializeVaultOperatorDelegationSnapshotInstructionDataArgs['firstSlotOfNcnEpoch'];
};

export function getInitializeVaultOperatorDelegationSnapshotInstruction<
  TAccountNcnConfig extends string,
  TAccountRestakingConfig extends string,
  TAccountNcn extends string,
  TAccountOperator extends string,
  TAccountVault extends string,
  TAccountVaultNcnTicket extends string,
  TAccountNcnVaultTicket extends string,
  TAccountVaultOperatorDelegation extends string,
  TAccountWeightTable extends string,
  TAccountEpochSnapshot extends string,
  TAccountOperatorSnapshot extends string,
  TAccountVaultOperatorDelegationSnapshot extends string,
  TAccountPayer extends string,
  TAccountRestakingProgramId extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: InitializeVaultOperatorDelegationSnapshotInput<
    TAccountNcnConfig,
    TAccountRestakingConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountVault,
    TAccountVaultNcnTicket,
    TAccountNcnVaultTicket,
    TAccountVaultOperatorDelegation,
    TAccountWeightTable,
    TAccountEpochSnapshot,
    TAccountOperatorSnapshot,
    TAccountVaultOperatorDelegationSnapshot,
    TAccountPayer,
    TAccountRestakingProgramId,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeVaultOperatorDelegationSnapshotInstruction<
  TProgramAddress,
  TAccountNcnConfig,
  TAccountRestakingConfig,
  TAccountNcn,
  TAccountOperator,
  TAccountVault,
  TAccountVaultNcnTicket,
  TAccountNcnVaultTicket,
  TAccountVaultOperatorDelegation,
  TAccountWeightTable,
  TAccountEpochSnapshot,
  TAccountOperatorSnapshot,
  TAccountVaultOperatorDelegationSnapshot,
  TAccountPayer,
  TAccountRestakingProgramId,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncnConfig: { value: input.ncnConfig ?? null, isWritable: false },
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    ncn: { value: input.ncn ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    vaultNcnTicket: { value: input.vaultNcnTicket ?? null, isWritable: false },
    ncnVaultTicket: { value: input.ncnVaultTicket ?? null, isWritable: false },
    vaultOperatorDelegation: {
      value: input.vaultOperatorDelegation ?? null,
      isWritable: false,
    },
    weightTable: { value: input.weightTable ?? null, isWritable: false },
    epochSnapshot: { value: input.epochSnapshot ?? null, isWritable: true },
    operatorSnapshot: {
      value: input.operatorSnapshot ?? null,
      isWritable: true,
    },
    vaultOperatorDelegationSnapshot: {
      value: input.vaultOperatorDelegationSnapshot ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    restakingProgramId: {
      value: input.restakingProgramId ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncnConfig),
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultNcnTicket),
      getAccountMeta(accounts.ncnVaultTicket),
      getAccountMeta(accounts.vaultOperatorDelegation),
      getAccountMeta(accounts.weightTable),
      getAccountMeta(accounts.epochSnapshot),
      getAccountMeta(accounts.operatorSnapshot),
      getAccountMeta(accounts.vaultOperatorDelegationSnapshot),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.restakingProgramId),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeVaultOperatorDelegationSnapshotInstructionDataEncoder().encode(
      args as InitializeVaultOperatorDelegationSnapshotInstructionDataArgs
    ),
  } as InitializeVaultOperatorDelegationSnapshotInstruction<
    TProgramAddress,
    TAccountNcnConfig,
    TAccountRestakingConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountVault,
    TAccountVaultNcnTicket,
    TAccountNcnVaultTicket,
    TAccountVaultOperatorDelegation,
    TAccountWeightTable,
    TAccountEpochSnapshot,
    TAccountOperatorSnapshot,
    TAccountVaultOperatorDelegationSnapshot,
    TAccountPayer,
    TAccountRestakingProgramId,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeVaultOperatorDelegationSnapshotInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncnConfig: TAccountMetas[0];
    restakingConfig: TAccountMetas[1];
    ncn: TAccountMetas[2];
    operator: TAccountMetas[3];
    vault: TAccountMetas[4];
    vaultNcnTicket: TAccountMetas[5];
    ncnVaultTicket: TAccountMetas[6];
    vaultOperatorDelegation: TAccountMetas[7];
    weightTable: TAccountMetas[8];
    epochSnapshot: TAccountMetas[9];
    operatorSnapshot: TAccountMetas[10];
    vaultOperatorDelegationSnapshot: TAccountMetas[11];
    payer: TAccountMetas[12];
    restakingProgramId: TAccountMetas[13];
    systemProgram: TAccountMetas[14];
  };
  data: InitializeVaultOperatorDelegationSnapshotInstructionData;
};

export function parseInitializeVaultOperatorDelegationSnapshotInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeVaultOperatorDelegationSnapshotInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncnConfig: getNextAccount(),
      restakingConfig: getNextAccount(),
      ncn: getNextAccount(),
      operator: getNextAccount(),
      vault: getNextAccount(),
      vaultNcnTicket: getNextAccount(),
      ncnVaultTicket: getNextAccount(),
      vaultOperatorDelegation: getNextAccount(),
      weightTable: getNextAccount(),
      epochSnapshot: getNextAccount(),
      operatorSnapshot: getNextAccount(),
      vaultOperatorDelegationSnapshot: getNextAccount(),
      payer: getNextAccount(),
      restakingProgramId: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeVaultOperatorDelegationSnapshotInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
