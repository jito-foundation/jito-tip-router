/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PROCESS_EPOCH_REWARD_BUCKETS_DISCRIMINATOR = 13;

export function getProcessEpochRewardBucketsDiscriminatorBytes() {
  return getU8Encoder().encode(PROCESS_EPOCH_REWARD_BUCKETS_DISCRIMINATOR);
}

export type ProcessEpochRewardBucketsInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountBallotBox extends string | IAccountMeta<string> = string,
  TAccountEpochRewardRouter extends string | IAccountMeta<string> = string,
  TAccountRestakingProgramId extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountBallotBox extends string
        ? ReadonlyAccount<TAccountBallotBox>
        : TAccountBallotBox,
      TAccountEpochRewardRouter extends string
        ? ReadonlyAccount<TAccountEpochRewardRouter>
        : TAccountEpochRewardRouter,
      TAccountRestakingProgramId extends string
        ? ReadonlyAccount<TAccountRestakingProgramId>
        : TAccountRestakingProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type ProcessEpochRewardBucketsInstructionData = {
  discriminator: number;
  firstSlotOfNcnEpoch: Option<bigint>;
};

export type ProcessEpochRewardBucketsInstructionDataArgs = {
  firstSlotOfNcnEpoch: OptionOrNullable<number | bigint>;
};

export function getProcessEpochRewardBucketsInstructionDataEncoder(): Encoder<ProcessEpochRewardBucketsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['firstSlotOfNcnEpoch', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: PROCESS_EPOCH_REWARD_BUCKETS_DISCRIMINATOR,
    })
  );
}

export function getProcessEpochRewardBucketsInstructionDataDecoder(): Decoder<ProcessEpochRewardBucketsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['firstSlotOfNcnEpoch', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getProcessEpochRewardBucketsInstructionDataCodec(): Codec<
  ProcessEpochRewardBucketsInstructionDataArgs,
  ProcessEpochRewardBucketsInstructionData
> {
  return combineCodec(
    getProcessEpochRewardBucketsInstructionDataEncoder(),
    getProcessEpochRewardBucketsInstructionDataDecoder()
  );
}

export type ProcessEpochRewardBucketsInput<
  TAccountRestakingConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountBallotBox extends string = string,
  TAccountEpochRewardRouter extends string = string,
  TAccountRestakingProgramId extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  ncn: Address<TAccountNcn>;
  ballotBox: Address<TAccountBallotBox>;
  epochRewardRouter: Address<TAccountEpochRewardRouter>;
  restakingProgramId: Address<TAccountRestakingProgramId>;
  firstSlotOfNcnEpoch: ProcessEpochRewardBucketsInstructionDataArgs['firstSlotOfNcnEpoch'];
};

export function getProcessEpochRewardBucketsInstruction<
  TAccountRestakingConfig extends string,
  TAccountNcn extends string,
  TAccountBallotBox extends string,
  TAccountEpochRewardRouter extends string,
  TAccountRestakingProgramId extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: ProcessEpochRewardBucketsInput<
    TAccountRestakingConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountEpochRewardRouter,
    TAccountRestakingProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): ProcessEpochRewardBucketsInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountNcn,
  TAccountBallotBox,
  TAccountEpochRewardRouter,
  TAccountRestakingProgramId
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ballotBox: { value: input.ballotBox ?? null, isWritable: false },
    epochRewardRouter: {
      value: input.epochRewardRouter ?? null,
      isWritable: false,
    },
    restakingProgramId: {
      value: input.restakingProgramId ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ballotBox),
      getAccountMeta(accounts.epochRewardRouter),
      getAccountMeta(accounts.restakingProgramId),
    ],
    programAddress,
    data: getProcessEpochRewardBucketsInstructionDataEncoder().encode(
      args as ProcessEpochRewardBucketsInstructionDataArgs
    ),
  } as ProcessEpochRewardBucketsInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountEpochRewardRouter,
    TAccountRestakingProgramId
  >;

  return instruction;
}

export type ParsedProcessEpochRewardBucketsInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    ncn: TAccountMetas[1];
    ballotBox: TAccountMetas[2];
    epochRewardRouter: TAccountMetas[3];
    restakingProgramId: TAccountMetas[4];
  };
  data: ProcessEpochRewardBucketsInstructionData;
};

export function parseProcessEpochRewardBucketsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedProcessEpochRewardBucketsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      ncn: getNextAccount(),
      ballotBox: getNextAccount(),
      epochRewardRouter: getNextAccount(),
      restakingProgramId: getNextAccount(),
    },
    data: getProcessEpochRewardBucketsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
