/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REGISTER_MINT_DISCRIMINATOR = 9;

export function getRegisterMintDiscriminatorBytes() {
  return getU8Encoder().encode(REGISTER_MINT_DISCRIMINATOR);
}

export type RegisterMintInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountTrackedMints extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountWeightTable extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultNcnTicket extends string | IAccountMeta<string> = string,
  TAccountNcnVaultTicket extends string | IAccountMeta<string> = string,
  TAccountRestakingProgramId extends string | IAccountMeta<string> = string,
  TAccountVaultProgramId extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountTrackedMints extends string
        ? WritableAccount<TAccountTrackedMints>
        : TAccountTrackedMints,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountWeightTable extends string
        ? ReadonlyAccount<TAccountWeightTable>
        : TAccountWeightTable,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultNcnTicket extends string
        ? ReadonlyAccount<TAccountVaultNcnTicket>
        : TAccountVaultNcnTicket,
      TAccountNcnVaultTicket extends string
        ? ReadonlyAccount<TAccountNcnVaultTicket>
        : TAccountNcnVaultTicket,
      TAccountRestakingProgramId extends string
        ? ReadonlyAccount<TAccountRestakingProgramId>
        : TAccountRestakingProgramId,
      TAccountVaultProgramId extends string
        ? ReadonlyAccount<TAccountVaultProgramId>
        : TAccountVaultProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterMintInstructionData = { discriminator: number };

export type RegisterMintInstructionDataArgs = {};

export function getRegisterMintInstructionDataEncoder(): Encoder<RegisterMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: REGISTER_MINT_DISCRIMINATOR })
  );
}

export function getRegisterMintInstructionDataDecoder(): Decoder<RegisterMintInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getRegisterMintInstructionDataCodec(): Codec<
  RegisterMintInstructionDataArgs,
  RegisterMintInstructionData
> {
  return combineCodec(
    getRegisterMintInstructionDataEncoder(),
    getRegisterMintInstructionDataDecoder()
  );
}

export type RegisterMintInput<
  TAccountRestakingConfig extends string = string,
  TAccountTrackedMints extends string = string,
  TAccountNcn extends string = string,
  TAccountWeightTable extends string = string,
  TAccountVault extends string = string,
  TAccountVaultNcnTicket extends string = string,
  TAccountNcnVaultTicket extends string = string,
  TAccountRestakingProgramId extends string = string,
  TAccountVaultProgramId extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  trackedMints: Address<TAccountTrackedMints>;
  ncn: Address<TAccountNcn>;
  weightTable: Address<TAccountWeightTable>;
  vault: Address<TAccountVault>;
  vaultNcnTicket: Address<TAccountVaultNcnTicket>;
  ncnVaultTicket: Address<TAccountNcnVaultTicket>;
  restakingProgramId: Address<TAccountRestakingProgramId>;
  vaultProgramId: Address<TAccountVaultProgramId>;
};

export function getRegisterMintInstruction<
  TAccountRestakingConfig extends string,
  TAccountTrackedMints extends string,
  TAccountNcn extends string,
  TAccountWeightTable extends string,
  TAccountVault extends string,
  TAccountVaultNcnTicket extends string,
  TAccountNcnVaultTicket extends string,
  TAccountRestakingProgramId extends string,
  TAccountVaultProgramId extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: RegisterMintInput<
    TAccountRestakingConfig,
    TAccountTrackedMints,
    TAccountNcn,
    TAccountWeightTable,
    TAccountVault,
    TAccountVaultNcnTicket,
    TAccountNcnVaultTicket,
    TAccountRestakingProgramId,
    TAccountVaultProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterMintInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountTrackedMints,
  TAccountNcn,
  TAccountWeightTable,
  TAccountVault,
  TAccountVaultNcnTicket,
  TAccountNcnVaultTicket,
  TAccountRestakingProgramId,
  TAccountVaultProgramId
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    trackedMints: { value: input.trackedMints ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    weightTable: { value: input.weightTable ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    vaultNcnTicket: { value: input.vaultNcnTicket ?? null, isWritable: false },
    ncnVaultTicket: { value: input.ncnVaultTicket ?? null, isWritable: false },
    restakingProgramId: {
      value: input.restakingProgramId ?? null,
      isWritable: false,
    },
    vaultProgramId: { value: input.vaultProgramId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.trackedMints),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.weightTable),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultNcnTicket),
      getAccountMeta(accounts.ncnVaultTicket),
      getAccountMeta(accounts.restakingProgramId),
      getAccountMeta(accounts.vaultProgramId),
    ],
    programAddress,
    data: getRegisterMintInstructionDataEncoder().encode({}),
  } as RegisterMintInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountTrackedMints,
    TAccountNcn,
    TAccountWeightTable,
    TAccountVault,
    TAccountVaultNcnTicket,
    TAccountNcnVaultTicket,
    TAccountRestakingProgramId,
    TAccountVaultProgramId
  >;

  return instruction;
}

export type ParsedRegisterMintInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    trackedMints: TAccountMetas[1];
    ncn: TAccountMetas[2];
    weightTable: TAccountMetas[3];
    vault: TAccountMetas[4];
    vaultNcnTicket: TAccountMetas[5];
    ncnVaultTicket: TAccountMetas[6];
    restakingProgramId: TAccountMetas[7];
    vaultProgramId: TAccountMetas[8];
  };
  data: RegisterMintInstructionData;
};

export function parseRegisterMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRegisterMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      trackedMints: getNextAccount(),
      ncn: getNextAccount(),
      weightTable: getNextAccount(),
      vault: getNextAccount(),
      vaultNcnTicket: getNextAccount(),
      ncnVaultTicket: getNextAccount(),
      restakingProgramId: getNextAccount(),
      vaultProgramId: getNextAccount(),
    },
    data: getRegisterMintInstructionDataDecoder().decode(instruction.data),
  };
}
