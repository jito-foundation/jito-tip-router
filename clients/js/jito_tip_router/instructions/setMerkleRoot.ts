/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_MERKLE_ROOT_DISCRIMINATOR = 21;

export function getSetMerkleRootDiscriminatorBytes() {
  return getU8Encoder().encode(SET_MERKLE_ROOT_DISCRIMINATOR);
}

export type SetMerkleRootInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountNcnConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountBallotBox extends string | IAccountMeta<string> = string,
  TAccountVoteAccount extends string | IAccountMeta<string> = string,
  TAccountTipDistributionAccount extends string | IAccountMeta<string> = string,
  TAccountTipDistributionConfig extends string | IAccountMeta<string> = string,
  TAccountTipDistributionProgram extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcnConfig extends string
        ? WritableAccount<TAccountNcnConfig>
        : TAccountNcnConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountBallotBox extends string
        ? ReadonlyAccount<TAccountBallotBox>
        : TAccountBallotBox,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountTipDistributionAccount extends string
        ? WritableAccount<TAccountTipDistributionAccount>
        : TAccountTipDistributionAccount,
      TAccountTipDistributionConfig extends string
        ? ReadonlyAccount<TAccountTipDistributionConfig>
        : TAccountTipDistributionConfig,
      TAccountTipDistributionProgram extends string
        ? ReadonlyAccount<TAccountTipDistributionProgram>
        : TAccountTipDistributionProgram,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetMerkleRootInstructionData = {
  discriminator: number;
  proof: Array<ReadonlyUint8Array>;
  merkleRoot: ReadonlyUint8Array;
  maxTotalClaim: bigint;
  maxNumNodes: bigint;
  epoch: bigint;
};

export type SetMerkleRootInstructionDataArgs = {
  proof: Array<ReadonlyUint8Array>;
  merkleRoot: ReadonlyUint8Array;
  maxTotalClaim: number | bigint;
  maxNumNodes: number | bigint;
  epoch: number | bigint;
};

export function getSetMerkleRootInstructionDataEncoder(): Encoder<SetMerkleRootInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['merkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['maxTotalClaim', getU64Encoder()],
      ['maxNumNodes', getU64Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_MERKLE_ROOT_DISCRIMINATOR })
  );
}

export function getSetMerkleRootInstructionDataDecoder(): Decoder<SetMerkleRootInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['merkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['maxTotalClaim', getU64Decoder()],
    ['maxNumNodes', getU64Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getSetMerkleRootInstructionDataCodec(): Codec<
  SetMerkleRootInstructionDataArgs,
  SetMerkleRootInstructionData
> {
  return combineCodec(
    getSetMerkleRootInstructionDataEncoder(),
    getSetMerkleRootInstructionDataDecoder()
  );
}

export type SetMerkleRootInput<
  TAccountNcnConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountBallotBox extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountTipDistributionAccount extends string = string,
  TAccountTipDistributionConfig extends string = string,
  TAccountTipDistributionProgram extends string = string,
  TAccountRestakingProgram extends string = string,
> = {
  ncnConfig: Address<TAccountNcnConfig>;
  ncn: Address<TAccountNcn>;
  ballotBox: Address<TAccountBallotBox>;
  voteAccount: Address<TAccountVoteAccount>;
  tipDistributionAccount: Address<TAccountTipDistributionAccount>;
  tipDistributionConfig: Address<TAccountTipDistributionConfig>;
  tipDistributionProgram: Address<TAccountTipDistributionProgram>;
  restakingProgram: Address<TAccountRestakingProgram>;
  proof: SetMerkleRootInstructionDataArgs['proof'];
  merkleRoot: SetMerkleRootInstructionDataArgs['merkleRoot'];
  maxTotalClaim: SetMerkleRootInstructionDataArgs['maxTotalClaim'];
  maxNumNodes: SetMerkleRootInstructionDataArgs['maxNumNodes'];
  epoch: SetMerkleRootInstructionDataArgs['epoch'];
};

export function getSetMerkleRootInstruction<
  TAccountNcnConfig extends string,
  TAccountNcn extends string,
  TAccountBallotBox extends string,
  TAccountVoteAccount extends string,
  TAccountTipDistributionAccount extends string,
  TAccountTipDistributionConfig extends string,
  TAccountTipDistributionProgram extends string,
  TAccountRestakingProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: SetMerkleRootInput<
    TAccountNcnConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountVoteAccount,
    TAccountTipDistributionAccount,
    TAccountTipDistributionConfig,
    TAccountTipDistributionProgram,
    TAccountRestakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetMerkleRootInstruction<
  TProgramAddress,
  TAccountNcnConfig,
  TAccountNcn,
  TAccountBallotBox,
  TAccountVoteAccount,
  TAccountTipDistributionAccount,
  TAccountTipDistributionConfig,
  TAccountTipDistributionProgram,
  TAccountRestakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncnConfig: { value: input.ncnConfig ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ballotBox: { value: input.ballotBox ?? null, isWritable: false },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    tipDistributionAccount: {
      value: input.tipDistributionAccount ?? null,
      isWritable: true,
    },
    tipDistributionConfig: {
      value: input.tipDistributionConfig ?? null,
      isWritable: false,
    },
    tipDistributionProgram: {
      value: input.tipDistributionProgram ?? null,
      isWritable: false,
    },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncnConfig),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ballotBox),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.tipDistributionAccount),
      getAccountMeta(accounts.tipDistributionConfig),
      getAccountMeta(accounts.tipDistributionProgram),
      getAccountMeta(accounts.restakingProgram),
    ],
    programAddress,
    data: getSetMerkleRootInstructionDataEncoder().encode(
      args as SetMerkleRootInstructionDataArgs
    ),
  } as SetMerkleRootInstruction<
    TProgramAddress,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountVoteAccount,
    TAccountTipDistributionAccount,
    TAccountTipDistributionConfig,
    TAccountTipDistributionProgram,
    TAccountRestakingProgram
  >;

  return instruction;
}

export type ParsedSetMerkleRootInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncnConfig: TAccountMetas[0];
    ncn: TAccountMetas[1];
    ballotBox: TAccountMetas[2];
    voteAccount: TAccountMetas[3];
    tipDistributionAccount: TAccountMetas[4];
    tipDistributionConfig: TAccountMetas[5];
    tipDistributionProgram: TAccountMetas[6];
    restakingProgram: TAccountMetas[7];
  };
  data: SetMerkleRootInstructionData;
};

export function parseSetMerkleRootInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetMerkleRootInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncnConfig: getNextAccount(),
      ncn: getNextAccount(),
      ballotBox: getNextAccount(),
      voteAccount: getNextAccount(),
      tipDistributionAccount: getNextAccount(),
      tipDistributionConfig: getNextAccount(),
      tipDistributionProgram: getNextAccount(),
      restakingProgram: getNextAccount(),
    },
    data: getSetMerkleRootInstructionDataDecoder().decode(instruction.data),
  };
}
