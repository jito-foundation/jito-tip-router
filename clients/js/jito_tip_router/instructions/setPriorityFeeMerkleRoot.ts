/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_PRIORITY_FEE_MERKLE_ROOT_DISCRIMINATOR = 17;

export function getSetPriorityFeeMerkleRootDiscriminatorBytes() {
  return getU8Encoder().encode(SET_PRIORITY_FEE_MERKLE_ROOT_DISCRIMINATOR);
}

export type SetPriorityFeeMerkleRootInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountEpochState extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountBallotBox extends string | IAccountMeta<string> = string,
  TAccountVoteAccount extends string | IAccountMeta<string> = string,
  TAccountTipDistributionAccount extends string | IAccountMeta<string> = string,
  TAccountTipDistributionConfig extends string | IAccountMeta<string> = string,
  TAccountPriorityFeeDistributionProgram extends
    | string
    | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEpochState extends string
        ? WritableAccount<TAccountEpochState>
        : TAccountEpochState,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountBallotBox extends string
        ? ReadonlyAccount<TAccountBallotBox>
        : TAccountBallotBox,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountTipDistributionAccount extends string
        ? WritableAccount<TAccountTipDistributionAccount>
        : TAccountTipDistributionAccount,
      TAccountTipDistributionConfig extends string
        ? ReadonlyAccount<TAccountTipDistributionConfig>
        : TAccountTipDistributionConfig,
      TAccountPriorityFeeDistributionProgram extends string
        ? ReadonlyAccount<TAccountPriorityFeeDistributionProgram>
        : TAccountPriorityFeeDistributionProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetPriorityFeeMerkleRootInstructionData = {
  discriminator: number;
  proof: Array<ReadonlyUint8Array>;
  merkleRoot: ReadonlyUint8Array;
  maxTotalClaim: bigint;
  maxNumNodes: bigint;
  epoch: bigint;
};

export type SetPriorityFeeMerkleRootInstructionDataArgs = {
  proof: Array<ReadonlyUint8Array>;
  merkleRoot: ReadonlyUint8Array;
  maxTotalClaim: number | bigint;
  maxNumNodes: number | bigint;
  epoch: number | bigint;
};

export function getSetPriorityFeeMerkleRootInstructionDataEncoder(): Encoder<SetPriorityFeeMerkleRootInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['merkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['maxTotalClaim', getU64Encoder()],
      ['maxNumNodes', getU64Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PRIORITY_FEE_MERKLE_ROOT_DISCRIMINATOR,
    })
  );
}

export function getSetPriorityFeeMerkleRootInstructionDataDecoder(): Decoder<SetPriorityFeeMerkleRootInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['merkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['maxTotalClaim', getU64Decoder()],
    ['maxNumNodes', getU64Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getSetPriorityFeeMerkleRootInstructionDataCodec(): Codec<
  SetPriorityFeeMerkleRootInstructionDataArgs,
  SetPriorityFeeMerkleRootInstructionData
> {
  return combineCodec(
    getSetPriorityFeeMerkleRootInstructionDataEncoder(),
    getSetPriorityFeeMerkleRootInstructionDataDecoder()
  );
}

export type SetPriorityFeeMerkleRootInput<
  TAccountEpochState extends string = string,
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountBallotBox extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountTipDistributionAccount extends string = string,
  TAccountTipDistributionConfig extends string = string,
  TAccountPriorityFeeDistributionProgram extends string = string,
> = {
  epochState: Address<TAccountEpochState>;
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  ballotBox: Address<TAccountBallotBox>;
  voteAccount: Address<TAccountVoteAccount>;
  tipDistributionAccount: Address<TAccountTipDistributionAccount>;
  tipDistributionConfig: Address<TAccountTipDistributionConfig>;
  priorityFeeDistributionProgram: Address<TAccountPriorityFeeDistributionProgram>;
  proof: SetPriorityFeeMerkleRootInstructionDataArgs['proof'];
  merkleRoot: SetPriorityFeeMerkleRootInstructionDataArgs['merkleRoot'];
  maxTotalClaim: SetPriorityFeeMerkleRootInstructionDataArgs['maxTotalClaim'];
  maxNumNodes: SetPriorityFeeMerkleRootInstructionDataArgs['maxNumNodes'];
  epoch: SetPriorityFeeMerkleRootInstructionDataArgs['epoch'];
};

export function getSetPriorityFeeMerkleRootInstruction<
  TAccountEpochState extends string,
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountBallotBox extends string,
  TAccountVoteAccount extends string,
  TAccountTipDistributionAccount extends string,
  TAccountTipDistributionConfig extends string,
  TAccountPriorityFeeDistributionProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: SetPriorityFeeMerkleRootInput<
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountVoteAccount,
    TAccountTipDistributionAccount,
    TAccountTipDistributionConfig,
    TAccountPriorityFeeDistributionProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetPriorityFeeMerkleRootInstruction<
  TProgramAddress,
  TAccountEpochState,
  TAccountConfig,
  TAccountNcn,
  TAccountBallotBox,
  TAccountVoteAccount,
  TAccountTipDistributionAccount,
  TAccountTipDistributionConfig,
  TAccountPriorityFeeDistributionProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    epochState: { value: input.epochState ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ballotBox: { value: input.ballotBox ?? null, isWritable: false },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    tipDistributionAccount: {
      value: input.tipDistributionAccount ?? null,
      isWritable: true,
    },
    tipDistributionConfig: {
      value: input.tipDistributionConfig ?? null,
      isWritable: false,
    },
    priorityFeeDistributionProgram: {
      value: input.priorityFeeDistributionProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.epochState),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ballotBox),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.tipDistributionAccount),
      getAccountMeta(accounts.tipDistributionConfig),
      getAccountMeta(accounts.priorityFeeDistributionProgram),
    ],
    programAddress,
    data: getSetPriorityFeeMerkleRootInstructionDataEncoder().encode(
      args as SetPriorityFeeMerkleRootInstructionDataArgs
    ),
  } as SetPriorityFeeMerkleRootInstruction<
    TProgramAddress,
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountVoteAccount,
    TAccountTipDistributionAccount,
    TAccountTipDistributionConfig,
    TAccountPriorityFeeDistributionProgram
  >;

  return instruction;
}

export type ParsedSetPriorityFeeMerkleRootInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    epochState: TAccountMetas[0];
    config: TAccountMetas[1];
    ncn: TAccountMetas[2];
    ballotBox: TAccountMetas[3];
    voteAccount: TAccountMetas[4];
    tipDistributionAccount: TAccountMetas[5];
    tipDistributionConfig: TAccountMetas[6];
    priorityFeeDistributionProgram: TAccountMetas[7];
  };
  data: SetPriorityFeeMerkleRootInstructionData;
};

export function parseSetPriorityFeeMerkleRootInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetPriorityFeeMerkleRootInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      epochState: getNextAccount(),
      config: getNextAccount(),
      ncn: getNextAccount(),
      ballotBox: getNextAccount(),
      voteAccount: getNextAccount(),
      tipDistributionAccount: getNextAccount(),
      tipDistributionConfig: getNextAccount(),
      priorityFeeDistributionProgram: getNextAccount(),
    },
    data: getSetPriorityFeeMerkleRootInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
