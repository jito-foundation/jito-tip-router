/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_TRACKED_MINT_NCN_FEE_GROUP_DISCRIMINATOR = 18;

export function getSetTrackedMintNcnFeeGroupDiscriminatorBytes() {
  return getU8Encoder().encode(SET_TRACKED_MINT_NCN_FEE_GROUP_DISCRIMINATOR);
}

export type SetTrackedMintNcnFeeGroupInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountRestakingConfig extends string | IAccountMeta<string> = string,
  TAccountNcnConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountWeightTable extends string | IAccountMeta<string> = string,
  TAccountTrackedMints extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRestakingConfig extends string
        ? ReadonlyAccount<TAccountRestakingConfig>
        : TAccountRestakingConfig,
      TAccountNcnConfig extends string
        ? ReadonlyAccount<TAccountNcnConfig>
        : TAccountNcnConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountWeightTable extends string
        ? ReadonlyAccount<TAccountWeightTable>
        : TAccountWeightTable,
      TAccountTrackedMints extends string
        ? WritableAccount<TAccountTrackedMints>
        : TAccountTrackedMints,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetTrackedMintNcnFeeGroupInstructionData = {
  discriminator: number;
  vaultIndex: bigint;
  ncnFeeGroup: number;
};

export type SetTrackedMintNcnFeeGroupInstructionDataArgs = {
  vaultIndex: number | bigint;
  ncnFeeGroup: number;
};

export function getSetTrackedMintNcnFeeGroupInstructionDataEncoder(): Encoder<SetTrackedMintNcnFeeGroupInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['vaultIndex', getU64Encoder()],
      ['ncnFeeGroup', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_TRACKED_MINT_NCN_FEE_GROUP_DISCRIMINATOR,
    })
  );
}

export function getSetTrackedMintNcnFeeGroupInstructionDataDecoder(): Decoder<SetTrackedMintNcnFeeGroupInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['vaultIndex', getU64Decoder()],
    ['ncnFeeGroup', getU8Decoder()],
  ]);
}

export function getSetTrackedMintNcnFeeGroupInstructionDataCodec(): Codec<
  SetTrackedMintNcnFeeGroupInstructionDataArgs,
  SetTrackedMintNcnFeeGroupInstructionData
> {
  return combineCodec(
    getSetTrackedMintNcnFeeGroupInstructionDataEncoder(),
    getSetTrackedMintNcnFeeGroupInstructionDataDecoder()
  );
}

export type SetTrackedMintNcnFeeGroupInput<
  TAccountRestakingConfig extends string = string,
  TAccountNcnConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountWeightTable extends string = string,
  TAccountTrackedMints extends string = string,
  TAccountAdmin extends string = string,
  TAccountRestakingProgram extends string = string,
> = {
  restakingConfig: Address<TAccountRestakingConfig>;
  ncnConfig: Address<TAccountNcnConfig>;
  ncn: Address<TAccountNcn>;
  weightTable: Address<TAccountWeightTable>;
  trackedMints: Address<TAccountTrackedMints>;
  admin: TransactionSigner<TAccountAdmin>;
  restakingProgram: Address<TAccountRestakingProgram>;
  vaultIndex: SetTrackedMintNcnFeeGroupInstructionDataArgs['vaultIndex'];
  ncnFeeGroup: SetTrackedMintNcnFeeGroupInstructionDataArgs['ncnFeeGroup'];
};

export function getSetTrackedMintNcnFeeGroupInstruction<
  TAccountRestakingConfig extends string,
  TAccountNcnConfig extends string,
  TAccountNcn extends string,
  TAccountWeightTable extends string,
  TAccountTrackedMints extends string,
  TAccountAdmin extends string,
  TAccountRestakingProgram extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: SetTrackedMintNcnFeeGroupInput<
    TAccountRestakingConfig,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountWeightTable,
    TAccountTrackedMints,
    TAccountAdmin,
    TAccountRestakingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetTrackedMintNcnFeeGroupInstruction<
  TProgramAddress,
  TAccountRestakingConfig,
  TAccountNcnConfig,
  TAccountNcn,
  TAccountWeightTable,
  TAccountTrackedMints,
  TAccountAdmin,
  TAccountRestakingProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    restakingConfig: {
      value: input.restakingConfig ?? null,
      isWritable: false,
    },
    ncnConfig: { value: input.ncnConfig ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    weightTable: { value: input.weightTable ?? null, isWritable: false },
    trackedMints: { value: input.trackedMints ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.restakingConfig),
      getAccountMeta(accounts.ncnConfig),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.weightTable),
      getAccountMeta(accounts.trackedMints),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.restakingProgram),
    ],
    programAddress,
    data: getSetTrackedMintNcnFeeGroupInstructionDataEncoder().encode(
      args as SetTrackedMintNcnFeeGroupInstructionDataArgs
    ),
  } as SetTrackedMintNcnFeeGroupInstruction<
    TProgramAddress,
    TAccountRestakingConfig,
    TAccountNcnConfig,
    TAccountNcn,
    TAccountWeightTable,
    TAccountTrackedMints,
    TAccountAdmin,
    TAccountRestakingProgram
  >;

  return instruction;
}

export type ParsedSetTrackedMintNcnFeeGroupInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    restakingConfig: TAccountMetas[0];
    ncnConfig: TAccountMetas[1];
    ncn: TAccountMetas[2];
    weightTable: TAccountMetas[3];
    trackedMints: TAccountMetas[4];
    admin: TAccountMetas[5];
    restakingProgram: TAccountMetas[6];
  };
  data: SetTrackedMintNcnFeeGroupInstructionData;
};

export function parseSetTrackedMintNcnFeeGroupInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetTrackedMintNcnFeeGroupInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      restakingConfig: getNextAccount(),
      ncnConfig: getNextAccount(),
      ncn: getNextAccount(),
      weightTable: getNextAccount(),
      trackedMints: getNextAccount(),
      admin: getNextAccount(),
      restakingProgram: getNextAccount(),
    },
    data: getSetTrackedMintNcnFeeGroupInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
