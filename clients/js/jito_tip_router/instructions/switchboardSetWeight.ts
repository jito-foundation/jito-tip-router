/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_TIP_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SWITCHBOARD_SET_WEIGHT_DISCRIMINATOR = 6;

export function getSwitchboardSetWeightDiscriminatorBytes() {
  return getU8Encoder().encode(SWITCHBOARD_SET_WEIGHT_DISCRIMINATOR);
}

export type SwitchboardSetWeightInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountWeightTable extends string | IAccountMeta<string> = string,
  TAccountSwitchboardFeed extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountWeightTable extends string
        ? WritableAccount<TAccountWeightTable>
        : TAccountWeightTable,
      TAccountSwitchboardFeed extends string
        ? ReadonlyAccount<TAccountSwitchboardFeed>
        : TAccountSwitchboardFeed,
      ...TRemainingAccounts,
    ]
  >;

export type SwitchboardSetWeightInstructionData = {
  discriminator: number;
  stMint: Address;
  epoch: bigint;
};

export type SwitchboardSetWeightInstructionDataArgs = {
  stMint: Address;
  epoch: number | bigint;
};

export function getSwitchboardSetWeightInstructionDataEncoder(): Encoder<SwitchboardSetWeightInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['stMint', getAddressEncoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SWITCHBOARD_SET_WEIGHT_DISCRIMINATOR,
    })
  );
}

export function getSwitchboardSetWeightInstructionDataDecoder(): Decoder<SwitchboardSetWeightInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['stMint', getAddressDecoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getSwitchboardSetWeightInstructionDataCodec(): Codec<
  SwitchboardSetWeightInstructionDataArgs,
  SwitchboardSetWeightInstructionData
> {
  return combineCodec(
    getSwitchboardSetWeightInstructionDataEncoder(),
    getSwitchboardSetWeightInstructionDataDecoder()
  );
}

export type SwitchboardSetWeightInput<
  TAccountNcn extends string = string,
  TAccountWeightTable extends string = string,
  TAccountSwitchboardFeed extends string = string,
> = {
  ncn: Address<TAccountNcn>;
  weightTable: Address<TAccountWeightTable>;
  switchboardFeed: Address<TAccountSwitchboardFeed>;
  stMint: SwitchboardSetWeightInstructionDataArgs['stMint'];
  epoch: SwitchboardSetWeightInstructionDataArgs['epoch'];
};

export function getSwitchboardSetWeightInstruction<
  TAccountNcn extends string,
  TAccountWeightTable extends string,
  TAccountSwitchboardFeed extends string,
  TProgramAddress extends Address = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
>(
  input: SwitchboardSetWeightInput<
    TAccountNcn,
    TAccountWeightTable,
    TAccountSwitchboardFeed
  >,
  config?: { programAddress?: TProgramAddress }
): SwitchboardSetWeightInstruction<
  TProgramAddress,
  TAccountNcn,
  TAccountWeightTable,
  TAccountSwitchboardFeed
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? JITO_TIP_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncn: { value: input.ncn ?? null, isWritable: false },
    weightTable: { value: input.weightTable ?? null, isWritable: true },
    switchboardFeed: {
      value: input.switchboardFeed ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.weightTable),
      getAccountMeta(accounts.switchboardFeed),
    ],
    programAddress,
    data: getSwitchboardSetWeightInstructionDataEncoder().encode(
      args as SwitchboardSetWeightInstructionDataArgs
    ),
  } as SwitchboardSetWeightInstruction<
    TProgramAddress,
    TAccountNcn,
    TAccountWeightTable,
    TAccountSwitchboardFeed
  >;

  return instruction;
}

export type ParsedSwitchboardSetWeightInstruction<
  TProgram extends string = typeof JITO_TIP_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncn: TAccountMetas[0];
    weightTable: TAccountMetas[1];
    switchboardFeed: TAccountMetas[2];
  };
  data: SwitchboardSetWeightInstructionData;
};

export function parseSwitchboardSetWeightInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwitchboardSetWeightInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncn: getNextAccount(),
      weightTable: getNextAccount(),
      switchboardFeed: getNextAccount(),
    },
    data: getSwitchboardSetWeightInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
