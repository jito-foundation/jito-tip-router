/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedAdminUpdateWeightTableInstruction,
  type ParsedCastVoteInstruction,
  type ParsedDistributeBaseNcnRewardRouteInstruction,
  type ParsedDistributeBaseRewardsInstruction,
  type ParsedDistributeNcnOperatorRewardsInstruction,
  type ParsedDistributeNcnVaultRewardsInstruction,
  type ParsedInitializeBallotBoxInstruction,
  type ParsedInitializeBaseRewardRouterInstruction,
  type ParsedInitializeEpochSnapshotInstruction,
  type ParsedInitializeNCNConfigInstruction,
  type ParsedInitializeNcnRewardRouterInstruction,
  type ParsedInitializeOperatorSnapshotInstruction,
  type ParsedInitializeTrackedMintsInstruction,
  type ParsedInitializeWeightTableInstruction,
  type ParsedRegisterMintInstruction,
  type ParsedRouteBaseRewardsInstruction,
  type ParsedRouteNcnRewardsInstruction,
  type ParsedSetConfigFeesInstruction,
  type ParsedSetMerkleRootInstruction,
  type ParsedSetNewAdminInstruction,
  type ParsedSetTieBreakerInstruction,
  type ParsedSetTrackedMintNcnFeeGroupInstruction,
  type ParsedSnapshotVaultOperatorDelegationInstruction,
} from '../instructions';

export const JITO_TIP_ROUTER_PROGRAM_ADDRESS =
  'Fv9aHCgvPQSr4jg9W8eTS6Ys1SNmh2qjyATrbsjEMaSH' as Address<'Fv9aHCgvPQSr4jg9W8eTS6Ys1SNmh2qjyATrbsjEMaSH'>;

export enum JitoTipRouterAccount {
  BallotBox,
  BaseRewardRouter,
  EpochSnapshot,
  OperatorSnapshot,
  NcnConfig,
  NcnRewardRouter,
  TrackedMints,
  WeightTable,
}

export enum JitoTipRouterInstruction {
  InitializeNCNConfig,
  InitializeTrackedMints,
  SetConfigFees,
  SetNewAdmin,
  InitializeWeightTable,
  AdminUpdateWeightTable,
  InitializeEpochSnapshot,
  InitializeOperatorSnapshot,
  SnapshotVaultOperatorDelegation,
  RegisterMint,
  InitializeBaseRewardRouter,
  InitializeNcnRewardRouter,
  RouteBaseRewards,
  RouteNcnRewards,
  DistributeBaseRewards,
  DistributeBaseNcnRewardRoute,
  DistributeNcnOperatorRewards,
  DistributeNcnVaultRewards,
  SetTrackedMintNcnFeeGroup,
  InitializeBallotBox,
  CastVote,
  SetMerkleRoot,
  SetTieBreaker,
}

export function identifyJitoTipRouterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): JitoTipRouterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return JitoTipRouterInstruction.InitializeNCNConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return JitoTipRouterInstruction.InitializeTrackedMints;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return JitoTipRouterInstruction.SetConfigFees;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return JitoTipRouterInstruction.SetNewAdmin;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return JitoTipRouterInstruction.InitializeWeightTable;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return JitoTipRouterInstruction.AdminUpdateWeightTable;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return JitoTipRouterInstruction.InitializeEpochSnapshot;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return JitoTipRouterInstruction.InitializeOperatorSnapshot;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return JitoTipRouterInstruction.SnapshotVaultOperatorDelegation;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return JitoTipRouterInstruction.RegisterMint;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return JitoTipRouterInstruction.InitializeBaseRewardRouter;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return JitoTipRouterInstruction.InitializeNcnRewardRouter;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return JitoTipRouterInstruction.RouteBaseRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return JitoTipRouterInstruction.RouteNcnRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return JitoTipRouterInstruction.DistributeBaseRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return JitoTipRouterInstruction.DistributeBaseNcnRewardRoute;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return JitoTipRouterInstruction.DistributeNcnOperatorRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return JitoTipRouterInstruction.DistributeNcnVaultRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return JitoTipRouterInstruction.SetTrackedMintNcnFeeGroup;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return JitoTipRouterInstruction.InitializeBallotBox;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return JitoTipRouterInstruction.CastVote;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return JitoTipRouterInstruction.SetMerkleRoot;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return JitoTipRouterInstruction.SetTieBreaker;
  }
  throw new Error(
    'The provided instruction could not be identified as a jitoTipRouter instruction.'
  );
}

export type ParsedJitoTipRouterInstruction<
  TProgram extends string = 'Fv9aHCgvPQSr4jg9W8eTS6Ys1SNmh2qjyATrbsjEMaSH',
> =
  | ({
      instructionType: JitoTipRouterInstruction.InitializeNCNConfig;
    } & ParsedInitializeNCNConfigInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeTrackedMints;
    } & ParsedInitializeTrackedMintsInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.SetConfigFees;
    } & ParsedSetConfigFeesInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.SetNewAdmin;
    } & ParsedSetNewAdminInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeWeightTable;
    } & ParsedInitializeWeightTableInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.AdminUpdateWeightTable;
    } & ParsedAdminUpdateWeightTableInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeEpochSnapshot;
    } & ParsedInitializeEpochSnapshotInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeOperatorSnapshot;
    } & ParsedInitializeOperatorSnapshotInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.SnapshotVaultOperatorDelegation;
    } & ParsedSnapshotVaultOperatorDelegationInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.RegisterMint;
    } & ParsedRegisterMintInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeBaseRewardRouter;
    } & ParsedInitializeBaseRewardRouterInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeNcnRewardRouter;
    } & ParsedInitializeNcnRewardRouterInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.RouteBaseRewards;
    } & ParsedRouteBaseRewardsInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.RouteNcnRewards;
    } & ParsedRouteNcnRewardsInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.DistributeBaseRewards;
    } & ParsedDistributeBaseRewardsInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.DistributeBaseNcnRewardRoute;
    } & ParsedDistributeBaseNcnRewardRouteInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.DistributeNcnOperatorRewards;
    } & ParsedDistributeNcnOperatorRewardsInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.DistributeNcnVaultRewards;
    } & ParsedDistributeNcnVaultRewardsInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.SetTrackedMintNcnFeeGroup;
    } & ParsedSetTrackedMintNcnFeeGroupInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.InitializeBallotBox;
    } & ParsedInitializeBallotBoxInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.SetMerkleRoot;
    } & ParsedSetMerkleRootInstruction<TProgram>)
  | ({
      instructionType: JitoTipRouterInstruction.SetTieBreaker;
    } & ParsedSetTieBreakerInstruction<TProgram>);
